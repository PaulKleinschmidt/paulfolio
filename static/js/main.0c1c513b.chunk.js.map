{"version":3,"sources":["sqnce.gif","chicken.png","Me/styles.ts","Shared/Styles.tsx","Projects/styles.ts","Me/Me.tsx","Work/Styles.ts","Work/Work.tsx","Projects/Projects.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","styled","div","Divider","MyName","MyJob","About","Hi","Icons","SectionWrapper","props","width","Section","Box","color","Link","a","Header","ProjectName","ProjectDescription","ProjectImage","img","IconLink","spacingRight","Me","href","size","icon","faLinkedinIn","faGithub","faEnvelope","faFileAlt","JobHeader","JobName","JobTimeline","Position","Tech","jobs","name","link","position","timeline","tech","Work","map","job","key","projects","description","github","deployedSite","imgSrc","sqnce","chicken","Projects","project","style","display","justifyContent","dangerouslySetInnerHTML","__html","src","faCode","faExternalLinkAlt","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c1c513b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sqnce.782af66e.gif\";","module.exports = __webpack_public_path__ + \"static/media/chicken.3ba09168.png\";","\n\nimport styled from 'styled-components';\n\n\nexport const Header = styled.div`\n  margin: 100px;\n  margin-right: 50px;\n`\n\nexport const Divider = styled.div`\n  margin-top: 30vh;\n  height: 100px;\n  border: 4px solid #328de3;\n\n  @media (max-width: 900px) {\n    display: none;\n  }\n`\n\nexport const MyName = styled.div`\n  font-family: 'Questrial', sans-serif;\n  font-size: 40px;\n  font-weight: 700;\n  margin: auto;\n  text-align: left;\n  margin-bottom: 4px;\n  color: #328de3;\n`\n\nexport const MyJob = styled.div`\n  font-size: 30px;\n  margin: auto;\n  text-align: left;\n  font-weight: 100;\n  margin-top: 0px !important;\n`\n\nexport const About = styled.div`\n  margin-top: 40px;\n  font-size: 20px;\n  text-align: left;\n  line-height: 1.5;\n`\n\nexport const Hi = styled.div`\n  font-size: 24px;\n  margin-bottom: 20px;\n`\n\nexport const Icons = styled.div`\n  cursor: pointer;\n  margin-top: 40px;\n  width: 150px;\n  display: flex;\n  justify-content: space-between;\n\n  svg {\n    transition: all .1s ease-in-out;\n\n    &:hover {\n      color: #328de3;\n    }\n  }\n`\n","import styled from \"styled-components\";\n\nexport const SectionWrapper = styled.div<{width: string; }>`\n  ${props => `width: ${props.width};`}\n\n  @media (max-width: 900px) {\n    width: 100%;\n  }\n`\n\nexport const Section = styled.div<{ width?: string; }>`\n  margin: 50px;\n  margin-right: 50px;\n  ${props => props.width && `width: ${props.width};`}\n\n  @media (max-width: 900px) {\n    margin-left: 0;\n    margin-right: 0;\n  }\n`\n\nexport const Box = styled.div`\n  margin: 10px 0;\n  padding-bottom: 20px;\n  padding-top: 10px;\n  border-bottom: 4px solid ${props => props.color};\n  background-color: #2d2d2f;\n  padding: 20px;\n  border-radius: 3px;\n  transition: all .1s ease-in-out;\n\n  &:hover {\n    box-shadow: 0 4px 14px black;\n    transform: translate3d(0px, -3px, 0px);\n  }\n`\n\nexport const Link = styled.a`\n  cursor: pointer;\n  margin-right: 20px;\n  text-decoration: none;\n  color: white;\n  border-bottom: 2px solid white;\n  font-size: 20px;\n  font-weight: bold;\n  transition: all .1s ease-in-out;\n\n  &:hover {\n    color: ${props => props.color};\n    border-color: ${props => props.color};\n  }\n`\n\n","import styled from \"styled-components\";\n\nexport const Header = styled.div`\n  font-family: 'Questrial', sans-serif;\n  font-size: 40px;\n  font-weight: 700;\n  margin: auto;\n  text-align: left;\n  margin-bottom: 40px;\n  color: #34c749;\n`\n\nexport const ProjectName = styled.div`\n  font-size: 22px;\n  margin-bottom: 20px;\n`\n\nexport const ProjectDescription = styled.div`\n  line-height: 1.5em;\n  margin-bottom: 40px;\n  font-size: 20px;\n  a {\n    transition: all .1s ease-in-out;\n    text-decoration: none;\n    color: white;\n    font-weight: bold;\n    border-bottom: 2px solid white;\n    &:hover {\n      color: #34c749;\n      border-color: #34c749;\n    }\n  }\n`\n\nexport const ProjectImage = styled.img`\n  height: 120px;\n  width: 120px;\n  margin-left: 5px;\n`\n\nexport const IconLink = styled.a<{spacingRight?: string;}>`\n  ${props => props.spacingRight && `margin-right: ${props.spacingRight};`}\n  cursor: pointer;\n  text-decoration: none;\n  color: white;\n  font-size: 15px;\n  font-weight: bold;\n  transition: all .1s ease-in-out;\n\n  &:hover {\n    color: ${props => props.color};\n  }\n`\n\n\n","import React from 'react';\nimport { MyName, MyJob, About, Hi, Icons } from './styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEnvelope, faFileAlt } from '@fortawesome/free-solid-svg-icons'\nimport { faLinkedinIn, faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { Section } from '../Shared/Styles';\nimport { IconLink } from '../Projects/styles';\n\nexport const Me = () => {\n  return (\n    <Section>\n      <MyName>PAUL KLEINSCHMIDT</MyName>\n      <MyJob>Software Engineer</MyJob>\n      <About>\n      <Hi>Hi</Hi>\n        Welcome to my website! I'm software engineer a depth of experience creating user experiences. I write code with a focus on usability, scalability, and quality. In my free time, I enjoy creating electronic music and learning jazz songs on guitar. I am always interested in side projects and collaborations. Feel free to reach out if you would like to talk about code and/or music.\n      </About>\n      <Icons>\n      <IconLink color=\"white\" href=\"https://www.linkedin.com/in/paul-k/\">\n        <FontAwesomeIcon size=\"lg\" icon={faLinkedinIn} />\n      </IconLink>\n      <IconLink color=\"white\" href=\"https://www.github.com/paulkleinschmidt/\">\n        <FontAwesomeIcon size=\"lg\" icon={faGithub} />\n      </IconLink>\n      <IconLink color=\"white\" href=\"mailto:paul.kleinschmidt96@gmail.com\">\n        <FontAwesomeIcon size=\"lg\" icon={faEnvelope} />\n      </IconLink>\n      <IconLink color=\"white\" href=\"https://drive.google.com/file/d/1ujqcKvE0t3zKGssGrMpEI_Z9_UfBoQSs/view?usp=sharing\">\n        <FontAwesomeIcon size=\"lg\" icon={faFileAlt} />\n      </IconLink>\n      </Icons>\n    </Section>\n  );\n}\n\n","import styled from \"styled-components\";\n\nexport const Header = styled.div`\n  font-family: 'Questrial', sans-serif;\n  font-size: 40px;\n  font-weight: 700;\n  margin: auto;\n  text-align: left;\n  margin-bottom: 40px;\n  color: #ffa500;\n`\n\nexport const JobHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 4px;\n`\n\nexport const JobName = styled.div`\n  font-size: 20px;\n`\n\nexport const JobTimeline = styled.div`\n`\n\nexport const Position = styled.div`\n  margin: 8px 0 20px 0;\n  font-size: 20px;\n  font-weight: bold;\n`\n\nexport const Tech = styled.div`\n  font-size: 20px;\n`\n\n","import React from 'react';\nimport { Section, Box, Link } from '../Shared/Styles';\nimport { Header, JobName, JobTimeline, JobHeader, Tech, Position } from './Styles';\n\nconst jobs = [\n  {\n    name: \"Full Beaker\",\n    link: \"http://www.fullbeaker.com\",\n    position: \"Frontend Engineer\",\n    timeline: \"Oct 2019 - Present\",\n    tech: \"React, Typescript, Redux, Serverless, Gatsby\"\n  },\n  {\n    name: \"Censinet\",\n    link: \"http://www.censinet.com\",\n    position: \"Software Engineer\",\n    timeline: \"Feb 2018 - Oct 2019\",\n    tech: \"React, Typescript, Redux, Ruby on Rails, RSpec\"\n  },\n]\n\nexport const Work = () => {\n  return (\n    <Section>\n      <Header>\n        WORK\n      </Header>\n      {jobs.map(job => (\n        <Box color=\"#ffa500\" key={job.name}>\n          <JobHeader>\n            <JobName>\n              <Link href={job.link} color=\"#ffa500\">{job.name}</Link>\n            </JobName>\n            <JobTimeline>\n              {job.timeline}\n            </JobTimeline>\n          </JobHeader>\n          <Position>\n            {job.position}\n          </Position>\n          <Tech>\n            <strong>Tech:</strong> {job.tech}\n          </Tech>\n        </Box>\n      ))}\n    </Section>\n  );\n}\n\n","import React from 'react';\nimport { Section, Box, Link } from '../Shared/Styles';\nimport { Header, ProjectName, ProjectDescription, ProjectImage, IconLink } from './styles';\nimport sqnce from '../sqnce.gif';\nimport chicken from '../chicken.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCode, faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst projects = [\n  {\n    name: \"SQNCE\",\n    description: \"SQNCE is a beat sequencer made with React and a <a href=https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API>Web Audio</a> framework called ToneJS. Click on the squares to make beats in your browser. Works best on Chrome.\",\n    github: \"https://github.com/PaulKleinschmidt/react-beat-sequencer\",\n    deployedSite: \"https://paulkleinschmidt.github.io/react-beat-sequencer/\",\n    imgSrc: sqnce\n  },\n  {\n    name: \"Stardew Scrape\",\n    description: \"Stardew Scrape is a command line tool that allows you to do quick lookups of Stardew Valley character gift reactions. This was my first project utilizing web scraping and the Beautiful Soup Python library.\",\n    github: \"https://github.com/PaulKleinschmidt/stardew-scrape\",\n    imgSrc: chicken\n  },\n]\n\nexport const Projects = () => {\n  return (\n    <Section >\n      <Header>\n        PROJECTS\n      </Header>\n      {projects.map(project => (\n        <Box color=\"#34c749\" key={project.name}>\n          <div style={{display: 'flex', justifyContent: 'space-between'}}>\n            <div style={{width: \"70%\"}}>\n              <ProjectName>\n                {project.name}\n              </ProjectName>\n              <ProjectDescription dangerouslySetInnerHTML={{ __html: project.description }}/>\n            </div>\n            {project.imgSrc && <ProjectImage src={project.imgSrc} />}\n          </div>\n          <IconLink spacingRight=\"20px\" color=\"#34c749\" href={project.github}>\n            <FontAwesomeIcon size=\"lg\" icon={faCode} />\n          </IconLink>\n\n          {project.deployedSite && (\n            <IconLink color=\"#34c749\" href={project.deployedSite}>\n              <FontAwesomeIcon size=\"lg\" icon={faExternalLinkAlt} />\n            </IconLink>\n          )}\n        </Box>\n      ))}\n    </Section>\n  );\n}\n\n","import React from 'react';\nimport './App.css';\nimport { Me } from './Me/Me';\nimport { Divider } from './Me/styles';\nimport { Work } from './Work/Work';\nimport { Projects } from './Projects/Projects';\nimport { SectionWrapper } from './Shared/Styles';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SectionWrapper width=\"45%\">\n        <Me/>\n      </SectionWrapper>\n      <Divider/>\n      <SectionWrapper width=\"55%\">\n        <Work/>\n        <Projects/>\n      </SectionWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}